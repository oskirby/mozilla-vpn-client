name: Linux Packages
on:
  push:
    branches:
      - main
      - pbuilder
      - 'releases/**'
  pull_request:
    branches:
      - main
      - 'releases/**'

jobs:
  source-bundle:
    name: Source Bundle
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Generate build revesion
        shell: bash
        env:
          GITREF: ${{github.ref}}
        run: |
          if [[ "$GITREF" == "refs/heads/main" ]]; then
            echo "revision=~github${{github.run_number}}" >> $GITHUB_ENV
          elif [[ "$GITREF" =~ refs/pull/([0-9]+)/merge ]]; then
            echo "revision=~pull${BASH_REMATCH[1]}" >> $GITHUB_ENV
          elif [[ "$GITREF" =~ refs/heads/releases/(.*) ]]; then
            git fetch --unshallow
            echo "revision=$(git rev-list --count --first-parent origin/main..HEAD)" >> $GITHUB_ENV
          else
            echo "revision=~unknown" >> $GITHUB_ENV
          fi

      - name: Install source dependencies
        shell: bash
        run: |
          sudo apt-get install qt5-default qttools5-dev-tools golang debhelper -y
          pip3 install "glean_parser==3.5"
          pip3 install pyhumps
          pip3 install pyyaml
      
      - name: Build source bundle
        shell: bash
        run: ./scripts/linux_script.sh --source --version $revision
      
      - name: Uploading
        uses: actions/upload-artifact@v2
        with:
            name: Sources
            path: .tmp

  ubuntu-packages:
    name: Ubuntu Packages
    needs: source-bundle
    strategy:
      matrix:
        config:
            - { name: "Bionic", dist: bionic, ppa: "ppa:beineri/opt-qt-5.15.2-bionic bionic-updates" }
            - { name: "Focal", dist: focal, ppa: "ppa:beineri/opt-qt-5.15.2-focal" }
            - { name: "Hirsute", dist: hirsute, ppa: "" }

    runs-on: ubuntu-latest
    env:
      basetgz: "/var/cache/pbuilder/ubuntu-buildd-${{matrix.config.dist}}.tgz"
    steps:
      - name: Download Source Package
        uses: actions/download-artifact@v2
        with:
            name: Sources
      
      - name: Create base ${{matrix.config.dist}} image
        run: |
          # Create hooks for extra distributions
          mkdir hooks
          echo '#!/bin/sh' >> hooks/E01extradist
          echo "MIRRORSITE=\$(grep -m1 ^deb /etc/apt/sources.list)" >> hooks/E01extradist
          for extra in ${{matrix.config.ppa}}; do
            if [[ $extra = ppa:* ]]; then
              PPA_USER=$(echo $extra | awk -F[:/] '{print $2}')
              PPA_NAME=$(echo $extra | awk -F[:/] '{print $3}')
              PPA_FINGERPRINT=$(wget -qO- "https://launchpad.net/api/1.0/~$PPA_USER/+archive/$PPA_NAME" | jq -r .signing_key_fingerprint)
              echo "apt-key adv --keyserver keyserver.ubuntu.com --recv-keys $PPA_FINGERPRINT" >> hooks/E01extradist
              DEB_MIRROR="deb http://ppa.launchpad.net/$PPA_USER/$PPA_NAME/ubuntu ${{matrix.config.dist}} main"
            else
              DEB_MIRROR="\$(echo \$MIRRORSITE | sed -e 's/${{matrix.config.dist}}/$extra/')"
            fi
            echo "echo $DEB_MIRROR >> /etc/apt/sources.list" >> hooks/E01extradist
          done
          echo "apt-get update" >> hooks/E01extradist
          chmod +x hooks/E01extradist
          echo "DEBUGME!"
          cat hooks/E01extradist

          sudo apt-get install pbuilder debootstrap debhelper devscripts -y
          sudo pbuilder create --distribution ${{ matrix.config.dist }} --basetgz $basetgz --hookdir $(pwd)/hooks \
               --debootstrapopts --variant=buildd --extrapackages gnupg

      - name: Building package
        shell: bash
        run: |
          cd ${{matrix.config.dist}}-stage
          ln -s ../mozillavpn_*.orig.tar.gz
          sudo pbuilder build --basetgz $basetgz --hookdir $(pwd)/hooks --buildresult $(pwd) mozillavpn_*.dsc

      - name: Uploading
        uses: actions/upload-artifact@v1
        with:
            name: ${{matrix.config.name}} Build
            path: ${{matrix.config.dist}}-stage

  rpmbuild:
    name: RPM Packages
    needs: source-bundle
    runs-on: ubuntu-latest
    container:
      image: fedora:33

    steps:
      - name: Download Source Package
        uses: actions/download-artifact@v2
        with:
            name: Sources

      - name: Install Build Dependencies
        run: |
          yum -y install rpm-build rpmdevtools yum-utils
          yum-builddep -y mozillavpn.spec

      - name: Building package
        shell: bash 
        run: rpmbuild -D "_topdir $(pwd)" -D "_sourcedir $(pwd)" -ba mozillavpn.spec

      - name: Uploading
        uses: actions/upload-artifact@v2
        with:
            name: RPM Build
            path: |
              RPMS/
              SRPMS/

