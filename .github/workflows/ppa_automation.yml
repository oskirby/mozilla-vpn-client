name: PPA Automated Releases
on:
  push:
    branches:
      - 'releases/**'

jobs:
  ppa-release-candidate:
    name: Source Bundle
    runs-on: ubuntu-latest
    environment: PPA Automation
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Generate release candidate version
        shell: bash
        env:
          GITREF: ${{github.ref}}
        run: |
          BUILDREV="~rc$(git rev-list --count --first-parent origin/main..HEAD)"
          VERSION=$(echo $GITREF | cut -d'/' -f4)
          sed -i "s/:VERSION.*/:VERSION = ${VERSION}${BUILDREV}/" version.pri

      - name: Install dependencies
        shell: bash
        run: |
          sudo apt-get install golang debhelper devscripts dput-ng -y
          pip3 install "glean_parser==3.5"
          pip3 install pyhumps
          pip3 install pyyaml
        
      - name: Acquire GPG Signing Key
        shell: bash
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSWORD: ${{ secrets.GPG_PASSWORD }}
          GNUPGHOME: ${{ github.workspace }}/gnupg-data
        run: |
          mkdir -m700 $GNUPGHOME
          echo "allow-preset-passphrase" >> $GNUPGHOME/gpg-agent.conf
          gpgconf --kill gpg-agent

          # Install the GPG signing key
          echo "$GPG_PRIVATE_KEY" | gpg --import --pinentry-mode loopback --passphrase "$GPG_PASSWORD"
          KEYGRIP=$(gpg --with-colons --with-keygrip --list-keys | grep -m1 '^grp:' | tr -d [grp:])
          echo "$GPG_PASSWORD" | /lib/gnupg2/gpg-preset-passphrase --preset $KEYGRIP

      - name: Build source bundle
        shell: bash
        env:
          GNUPGHOME: ${{ github.workspace }}/gnupg-data
        run: |
          echo "Debug: listing keys..."
          gpg --with-colons --list-keys
          KEYID=$(gpg --with-colons --list-keys | grep -m1 '^fpr:' | tr -d [fpr:])
          echo "KEYID is $KEYID"

          ./scripts/linux_script.sh --sign-key $KEYID --source

      - name: Uploading Sources
        uses: actions/upload-artifact@v2
        with:
            name: Sources
            path: .tmp

      - name: Push to PPA
        shell: bash
        env:
          PPA_URL: ppa:okirby/mozilla-vpn-test
        run: |
          for dist in $(find .tmp -type d -name '*-prod'); do
            (cd $dist && ln -s ../mozillavpn_*.orig.tar.gz)
            debsign -k $KEYID $dist/mozillavpn_*_source.changes
            dput $PPA_URL $dist/mozillavpn_*_source.changes
          done
      
      - name: Cleanup GPG Signing Key
        shell: bash
        continue-on-error: true
        env:
          GNUPGHOME: ${{ github.workspace }}/gnupg-data
        run: |
          gpgconf --kill gpg-agent
          rm -rf $GNUPGHOME
        
